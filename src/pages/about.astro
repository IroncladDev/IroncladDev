---
import Layout from '@/layouts/Layout.astro'
import Navbar from '@/components/Navbar.astro'
import VimNavigator from '@/components/VimNavigator.astro'
import Terminal from '@/components/Terminal.astro'
import { markdownToHtml } from '@/utils/markdown'
import '@webtui/css/components/spinner.css'

// start, end, items
const timeline: Array<[Date, Date, string]> = [
  [
    new Date('2016-01-01'),
    new Date('2018-01-01'),
    `- Discovered Programming on [Khan Academy](https://khanacademy.org)
- Built numerous small browser-based games with [Processing.js](https://gotoloop.github.io/processing-js.github.io/)
- Learned the basics of HTML, CSS, and DOM manipulation with JQuery`,
  ],
  [
    new Date('2018-01-01'),
    new Date('2020-01-01'),
    `- Learned the fundamentals of HTML/CSS from [Freecodecamp](https://freecodecamp.org)
- Learned how to make Fullstack applications with Flask and Node from [Codecademy](https://codecademy.com)
- Built some HTML/CSS/JS + Flask/Node fullstack projects that didn't get much traction
- Rolled my own auth various times`,
  ],
  [
    new Date('2020-01-01'),
    new Date('2022-01-01'),
    `- Found [Replit](https://replit.com) and used it to share and host my projects
- Continued to build various small web projects and browser-based games with HTML/CSS/JS
- Participated in Replit's first official game jam
- Applied for an internship at [Replit](https://replit.com) (I flunked the interview)`,
  ],
  [
    new Date('2022-01-01'),
    new Date('2022-08-01'),
    `- Got an internship at [Saasbox](https://saasbox.net)
- Learned Next.js and React
- Built various small web projects with Next.js
- Joined [Replit](https://replit.com)'s Community Moderation team
- Did some contract work on Anti-Abuse tools for [Replit](https://replit.com)'s Trust and Safety team
- Learned Typescript
- Built some Next.js + Typescript projects`,
  ],
  [
    new Date('2022-08-01'),
    new Date('2023-08-01'),
    `- Joined [Replit](https://replit.com) as a Support Engineer
  - Scaffolded, prototyped, built, and improved anti-abuse tools
  - Built multiple internal support tools
  - Redesigned and wrote large portions of the Replit Docs
  - Actively maintained the open source [Extensions API Client ↗](https://github.com/replit/extensions)
  - Eventually got fired for multiple HR violations (got too political on twitter)
- Attended the [Bitcoin++](https://btcpp.dev) conference for the first time
- Built some viral AI/Langchain projects around the release of OpenAI's text-davinci-003`,
  ],
  [
    new Date('2023-11-01'),
    new Date('2023-12-31'),
    `- Joined [Fedi](https://fedi.xyz) as a Frontend Software Engineer
  - Prototyped multiple small websites that interact with the Fedi API
  - Wrote a large portion of the Fedi Documentation
  - Performed extinsive work on the Fedi App and PWA
  - Indepentently built major features in the Fedi App
  - Traveled the world to attend large bitcoin-related conferences with the Fedi team
- Switched from VSC*de to Neovim`,
  ],
  [
    new Date('2024-01-01'),
    new Date('2024-12-31'),
    `- Attended multiple tech conferences around the world
- Went from being an introvert to a more outgoing person
- Grew a large audience on [X / Twitter](https://x.com/IroncladDev)
- Built various web projects with Next.js, Tailwind, and Framer Motion
- Started contributing to various open source projects`,
  ],
  [
    new Date('2025-01-01'),
    new Date(),
    `- Started streaming on X and Twitch
- Redesigned my website and rebranded
- Migrated from Next/Tailwind to Astro/CSS/JS
- Launched [WebTUI](https://webtui.ironclad.sh)`,
  ],
]

const timelineStart = timeline[0][0]
const timelineEnd = timeline[timeline.length - 1][1]

const yearStart = timelineStart.getUTCFullYear()
const yearEnd = timelineEnd.getUTCFullYear()

const years: Array<number> = []

for (let year = yearStart; year <= yearEnd; year++) {
  years.push(year)
}

const formatStartEnd = (start: Date, end: Date) => {
  const s = start.toLocaleDateString('en-US', {
    month: 'short',
    year: 'numeric',
    timeZone: 'UTC',
  })

  const e = end.toLocaleDateString('en-US', {
    month: 'short',
    year: 'numeric',
    timeZone: 'UTC',
  })

  if (start.getUTCMonth() === 0 && end.getUTCMonth() === 0) {
    return `${start.getUTCFullYear()} - ${end.getUTCFullYear()}`
  }

  return `${s} - ${e}`
}
---

<Layout>
  <main>
    <header>
      <Navbar />
      <column self-="grow" align-="center">
        <column id="header-content" gap-="1">
          <row>
            <h1 is-="badge" variant-="accent">About Me</h1>
          </row>
          <p>
            I&apos;m
            <strong>Conner</strong>, a
            <strong style="color: var(--yellow)">Texan</strong>
            <strong style="color: var(--blue)">Software Engineer</strong>
            who strives to build and share great software with the world
          </p>
          <p>
            I usually go by "<strong style="color: var(--blue)"
              >IroncladDev</strong
            >" on the internet
          </p>
          <column>
            <row id="about-info">
              <column self-="grow !basis" box-="square" shear-="top">
                <row
                  ><span is-="badge" variant-="background2" cap-="triangle"
                    >Occupation</span
                  ></row
                >
                <ul pad-="1 0" marker-="open tree">
                  <li>
                    Employed at <a href="https://fedi.xyz" target="_blank"
                      >Fedi</a
                    >
                  </li>
                  <li>
                    Building <a
                      href="https://webtui.ironclad.sh"
                      target="_blank">WebTUI</a
                    >
                  </li>
                  <li>
                    Configuring my <a
                      href="https://github.com/IroncladDev/dotfiles"
                      target="_blank">Dotfiles</a
                    >
                  </li>
                </ul>
              </column>
              <column self-="grow !basis" box-="square" shear-="top">
                <row
                  ><span is-="badge" variant-="background2" cap-="triangle"
                    >Contents</span
                  ></row
                >
                <ul pad-="1 0" marker-="open tree">
                  <li><a href="#top">About Me</a></li>
                  <li><a href="#stats">Stats</a></li>
                  <li><a href="#timeline">Timeline</a></li>
                </ul>
              </column>
            </row>
          </column>
          <row gap-="2" align-="center">
            <p><strong>J/↓</strong> Down</p>
            <p><strong>K/↑</strong> Up</p>
          </row>
        </column>
      </column>
    </header>

    <section id="stats">
      <column gap-="1">
        <row>
          <h2 is-="badge" variant-="accent">Stats</h2>
        </row>
        <p>
          I don&apos;t fit on any particular spectrum so here&apos;s a list of
          random stats
        </p>
        <Terminal>
          <column self-="grow !basis" pad-="2 1">
            <span>root@Macbook-Pro ~# stats</span>
            <ul class="stat-list">
              <li>
                <strong>Nationality:</strong>
                American
              </li>
              <li>
                <strong>Type:</strong>
                Asian
              </li>
              <li>
                <strong>Age:</strong>
                <span class="age">19</span>
              </li>
              <li>
                <strong>Religion:</strong>
                Christian
              </li>
              <li>
                <strong>Language:</strong>
                <ul class="stat-list nested">
                  <li>
                    <strong>Spoken:</strong>
                    English (American)
                  </li>
                  <li>
                    <strong>Written:</strong>
                    Markdown (American)
                  </li>
                  <li>
                    <strong>Programming:</strong>
                    Typescript (American)
                  </li>
                </ul>
              </li>
              <li>
                <strong>Hobbies:</strong>
                <ul class="stat-list nested">
                  <li>Jiu-Jitsu</li>
                  <li>Firearms Training</li>
                  <li>Airsoft</li>
                </ul>
              </li>
            </ul>
            <span
              >root@Macbook-Pro ~# <span class="cursor-blink" is-="spinner"
              ></span></span
            >
          </column>
        </Terminal>
      </column>
    </section>

    <section id="timeline" data-index="0">
      <column align-="center" id="timeline-container">
        <column gap-="1">
          <row gap-="1" pad-="2 0">
            <h3 is-="badge" variant-="accent">Timeline</h3>
            <span><span id="tl-counter">1</span>/{timeline.length}</span>
          </row>
          <row gap-="1" id="timeline-content" pad-="2 0">
            <column self-="!shrink">
              {
                years.map((year) => (
                  <span class="year" data-year={year}>
                    {year} <span class="year-marker">┃</span>
                  </span>
                ))
              }
            </column>
            {
              timeline.map(([start, end, markdown], i) => (
                <column
                  is-="typography-block"
                  class="timeline-item"
                  data-index={i}
                  data-start={start.getTime()}
                  data-end={end.getTime()}>
                  <row>
                    <h3 is-="badge" variant-="background1">
                      {formatStartEnd(start, end)}
                    </h3>
                  </row>
                  <column set:html={markdownToHtml(markdown)} gap-="1" />
                </column>
              ))
            }
          </row>
        </column>
      </column>

      {
        timeline.map(
          (_, i) => i > 0 && <div class="timeline-snap" data-index={i} />,
        )
      }
    </section>
  </main>
  <VimNavigator />
</Layout>

<style>
  header {
    --box-border-color: var(--background2);
    flex: none;
    display: flex;
    flex-direction: column;
    width: 100vw;
    height: 100vh;
    scroll-snap-align: end;
    background-color: var(--root);

    #header-content {
      max-width: var(--max-reading-width);
      padding: 0 2ch;
    }
  }

  #stats {
    padding: 0 2ch;

    column {
      max-width: var(--max-reading-width);
      width: 100%;
    }
  }

  #timeline {
    #timeline-container {
      position: sticky;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
    }

    #timeline-content {
      width: 100vw;
      max-width: var(--max-reading-width);
    }

    .year {
      background-color: var(--background0);
      color: var(--foreground2);
      padding-left: 1ch;

      .year-marker {
        background-color: var(--root);
        color: var(--background2);
      }

      &.active {
        color: var(--foreground0);

        .year-marker {
          color: var(--accent);
        }
      }
    }

    .timeline-snap {
      min-height: 50vh;
      scroll-snap-align: start;
      flex: none;

      &:last-of-type {
        min-height: 100vh;
      }
    }

    .timeline-item {
      display: none;

      ul li {
        color: var(--foreground1);

        &::before {
          color: var(--accent);
        }
      }
    }
  }

  .stat-list {
    li {
      color: var(--foreground1);

      strong {
        color: var(--accent);
      }
    }
  }

  .nested {
    margin-left: 2ch;
  }

  @media (max-width: 96ch) {
    #about-info {
      flex-direction: column !important;
    }
  }
</style>

<script>
  import { attachScrollSnapListener } from '@/utils/scroll'

  // Update my age automatically
  const targetDate = new Date('2005-11-15')
  const currentDate = new Date()

  const yearDiff = Math.floor(
    (currentDate.getTime() - targetDate.getTime()) / 31536000000,
  )

  const ages = document.querySelectorAll('.age') as NodeListOf<HTMLSpanElement>

  ages.forEach((age) => {
    age.innerText = yearDiff.toString()
  })

  attachScrollSnapListener(
    '.timeline-snap',
    (target) => {
      const targetIndex = Number(target?.dataset.index)

      if (!isNaN(targetIndex)) {
        const timelineCounter = document.querySelector(
          '#tl-counter',
        ) as HTMLSpanElement
        timelineCounter.innerText = String(targetIndex + 1)

        const timelineItems = document.querySelectorAll(
          '.timeline-item',
        ) as NodeListOf<HTMLElement>

        timelineItems.forEach((item) => {
          item.style.display = 'none'
        })

        const targetItem = document.querySelector(
          `.timeline-item[data-index="${targetIndex}"]`,
        ) as HTMLElement

        targetItem.style.display = 'flex'

        const targetItemStart = new Date(Number(targetItem.dataset.start))
        const targetItemEnd = new Date(Number(targetItem.dataset.end))

        const yearMarkers = document.querySelectorAll(
          '.year',
        ) as NodeListOf<HTMLSpanElement>

        console.log(targetItemStart, targetItemEnd)

        yearMarkers.forEach((yearMarker) => {
          const year = Number(yearMarker.dataset.year)
          const startYear = targetItemStart.getUTCFullYear()
          const endYear = targetItemEnd.getUTCFullYear()
          const isInRange = startYear <= year && endYear >= year

          if (isInRange) {
            yearMarker.classList.add('active')
          } else {
            yearMarker.classList.remove('active')
          }
        })
      }
    },
    '#timeline',
  )
</script>
